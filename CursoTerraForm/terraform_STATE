https://developer.hashicorp.com/terraform/language/state

State - O terraform não cria outros recursos caso ja tenha criado e seja executado outras vezes


Criação do bucket na aws
https://registry.terraform.io/providers/hashicorp/aws/latest/docs
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html (zonas aws)

criar uma pasta e dentro criar o main.tf
	terraform {

	  required_version = ">=1.0.0"

	  required_providers {
		aws = {
		  source = "hashicorp/aws"
		  version = "3.73.0"
	  	}
	  }
	}

	provider "aws" {
		region = "eu-central-1"	
		default_tags {
			tags = {
			  owner = "daniel"
			  managed-by = "terraform"
			}
		}
	}

copiar e colar as variaveis com as credenciais no terminal
	export AWS_ACCESS_KEY_ID=AKIAQFDGTAZWWVP
	export AWS_SECRET_ACCESS_KEY=6HiLAANBZeooaWp/i5p06nE+Xzf2WxeI3

terminal code - terraform init
		terraform validate 
		terraform plan -out=plan.out
		terraform apply plan.out ( Criar automático o terraform.tfstate )
		terraform fmt

 Tem todas as informações do bucket e provders terraform.tfstate

fazendo o terraform destroy, o terraform.tfstate fica basico
	mas em paralelo é criado o terraform.tfstate.backup





STATE REMOTO - Armazenrar remotamnte o arquivo de State remotamente

Novas aulas já estão sendo gravadas para atualizar o conteúdo, mas enquanto elas não ficam prontas, você tem duas opções ao criar a bucket da próxima aula:



1 - Usar o provider na mesma versão que foi usada no vídeo e montar a estrutura de blocos para criação da bucket seguindo o formato da aula.

    aws = {
      source  = "hashicorp/aws"
      version = "3.73.0"
    }


2 - Usar o provider na versão mais recente e montar a estrutura de blocos para a criação da bucket no novo formato.

    aws = {
      source  = "hashicorp/aws"
      version = "4.12.1"
    }


resource "aws_s3_bucket" "first_bucket" {
  bucket = "danielgil-remote-state"
}
 
resource "aws_s3_bucket_versioning" "versioning" {
  bucket = aws_s3_bucket.first_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}

Novas aulas já estão sendo gravadas para atualizar o conteúdo, mas enquanto elas não ficam prontas, você tem duas opções ao criar a bucket da próxima aula:



1 - Usar o provider na mesma versão que foi usada no vídeo e montar a estrutura de blocos para criação da bucket seguindo o formato da aula.

    aws = {
      source  = "hashicorp/aws"
      version = "3.73.0"
    }


2 - Usar o provider na versão mais recente e montar a estrutura de blocos para a criação da bucket no novo formato.

    aws = {
      source  = "hashicorp/aws"
      version = "4.12.1"
    }


resource "aws_s3_bucket" "first_bucket" {
  bucket = "danielgil-remote-state"
}
 
resource "aws_s3_bucket_versioning" "versioning" {
  bucket = aws_s3_bucket.first_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
}



Chave remota
Arquivo main.tf  
 
terraform {
    required_version = ">= 1.0.0"
    required_providers {
      aws = {
        source  = "hashicorp/aws"
        version = "3.73.0"
      }
     }	
      backend "s3" {
	bucket = "danielgil-remote-state"
	key = "aws-vpc/terraform.tfstate"
	region = "eu-central-1"
      }
}    

provider "aws" {
	region = "eu-central-1"

	default_tags {
	  tags = {
		owner = "danielgil"
		manager-by = "terraform"
	  }
	}
}



Criar novo arquivo network.tf

resource "aws_vpc' "vpc" {
	cidr_block = "10.0.0.0/16
	
	tags = {
		"Name" = "vpc-terraform"
	}

}

resource "aws_subnet" "subnet" {
	vpc_id = aws_vpc.vpc.id
	cidr_block = "10.0.1.0/24"

	tags = {
	   Name = "subnet-terraform"
	}
}


resource "aws_internet_gateway" "internet_gatway" {
	vpc_id = aws_vpc.vpc.id

	tags = {
	  name = "internet_gateway_terraform"
	}
}


resource  "aws_route_table" "route_table" {
		vpc_id = aws_vpc.vpc.id

	route {
	  cidr_block = "0.0.0.0/0"
	  gateway_id = aws_internet_gateway.internet
	}

	tags = {
	  Name = "route-table-terraform"
	}
}


resource "aws_route_table_association" rta" {
	subnet_id = aws_subnet.subnet.id
	route_table_id = aws_route_table.route.table.id
}


resource "aws_security_group" "security_group" {
	name = "security-group-terraform"
	vpc_id = aws_vpc.vpc.id

	ingress {
		from_port = 22
		to_port = 22
		protocol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}

	egress {	
		from_port = 0
		to_port = 0
		procotol = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}

}


Criar p arquivo output.tf
	output "subnet_id" {
		value = aws_subnet.subnet.id"
	}
	
	output "security_group_id " {
		value = aws_security_group.secuity_group.id
	}


Fazendo deploy

	Copia as credencias com as variaves com acessos e colar no terminal do code
	terraform fmt
	terraform validate
	terraform plan -out=plan.out
	terraform apply plan.out

